// <auto-generated />
using System;
using EcoTrack.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoTrack.Data.Migrations
{
    [DbContext(typeof(EcoTrackDbContext))]
    [Migration("20250915093125_AddEmailToUser")]
    partial class AddEmailToUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("EcoTrack.Core.Entities.Activity", b =>
                {
                    b.Property<Guid>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("ActivityType")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CarbonEmission")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");

                    b.HasDiscriminator<int>("ActivityType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.Badge", b =>
                {
                    b.Property<int>("BadgeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CriteriaMet")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateEarned")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BadgeId");

                    b.HasIndex("UserId");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.EmissionFactor", b =>
                {
                    b.Property<int>("EmissionFactorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<string>("SourceReference")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("EmissionFactorId");

                    b.ToTable("EmissionFactors");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.Family", b =>
                {
                    b.Property<Guid>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SharedConsumption")
                        .HasColumnType("TEXT");

                    b.HasKey("FamilyId");

                    b.ToTable("Families");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.LeaderboardEntry", b =>
                {
                    b.Property<int>("LeaderboardEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CarbonEmission")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CommunityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Rank")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LeaderboardEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("LeaderboardEntries");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.Suggestion", b =>
                {
                    b.Property<int>("SuggestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTimeIssued")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SavingAmount")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SuggestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Suggestions");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConnectedAccounts")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("FamilyId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("FamilyId1")
                        .HasColumnType("TEXT");

                    b.Property<string>("LifestylePreferences")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("FamilyId1");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.ApplianceActivity", b =>
                {
                    b.HasBaseType("EcoTrack.Core.Entities.Activity");

                    b.Property<string>("ApplianceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("EmissionFactorId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PowerRating")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UsageTime")
                        .HasColumnType("TEXT");

                    b.HasIndex("EmissionFactorId");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.ElectricityActivity", b =>
                {
                    b.HasBaseType("EcoTrack.Core.Entities.Activity");

                    b.Property<decimal>("Consumption")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmissionFactorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("EmissionFactorId");

                    b.ToTable("Activities", t =>
                        {
                            t.Property("EmissionFactorId")
                                .HasColumnName("ElectricityActivity_EmissionFactorId");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.FoodActivity", b =>
                {
                    b.HasBaseType("EcoTrack.Core.Entities.Activity");

                    b.Property<int>("EmissionFactorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("EmissionFactorId");

                    b.ToTable("Activities", t =>
                        {
                            t.Property("EmissionFactorId")
                                .HasColumnName("FoodActivity_EmissionFactorId");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.TravelActivity", b =>
                {
                    b.HasBaseType("EcoTrack.Core.Entities.Activity");

                    b.Property<decimal>("Distance")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmissionFactorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FuelType")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationStart")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("EmissionFactorId");

                    b.ToTable("Activities", t =>
                        {
                            t.Property("EmissionFactorId")
                                .HasColumnName("TravelActivity_EmissionFactorId");
                        });

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.WasteActivity", b =>
                {
                    b.HasBaseType("EcoTrack.Core.Entities.Activity");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmissionFactorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WasteType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("EmissionFactorId");

                    b.ToTable("Activities", t =>
                        {
                            t.Property("EmissionFactorId")
                                .HasColumnName("WasteActivity_EmissionFactorId");
                        });

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.Activity", b =>
                {
                    b.HasOne("EcoTrack.Core.Entities.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.Badge", b =>
                {
                    b.HasOne("EcoTrack.Core.Entities.User", "User")
                        .WithMany("Badges")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.LeaderboardEntry", b =>
                {
                    b.HasOne("EcoTrack.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.Suggestion", b =>
                {
                    b.HasOne("EcoTrack.Core.Entities.User", "User")
                        .WithMany("Suggestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.User", b =>
                {
                    b.HasOne("EcoTrack.Core.Entities.Family", "Family")
                        .WithMany("Members")
                        .HasForeignKey("FamilyId1");

                    b.Navigation("Family");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.ApplianceActivity", b =>
                {
                    b.HasOne("EcoTrack.Core.Entities.EmissionFactor", "EmissionFactor")
                        .WithMany()
                        .HasForeignKey("EmissionFactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmissionFactor");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.ElectricityActivity", b =>
                {
                    b.HasOne("EcoTrack.Core.Entities.EmissionFactor", "EmissionFactor")
                        .WithMany()
                        .HasForeignKey("EmissionFactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmissionFactor");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.FoodActivity", b =>
                {
                    b.HasOne("EcoTrack.Core.Entities.EmissionFactor", "EmissionFactor")
                        .WithMany()
                        .HasForeignKey("EmissionFactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmissionFactor");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.TravelActivity", b =>
                {
                    b.HasOne("EcoTrack.Core.Entities.EmissionFactor", "EmissionFactor")
                        .WithMany()
                        .HasForeignKey("EmissionFactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmissionFactor");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.WasteActivity", b =>
                {
                    b.HasOne("EcoTrack.Core.Entities.EmissionFactor", "EmissionFactor")
                        .WithMany()
                        .HasForeignKey("EmissionFactorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EmissionFactor");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.Family", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("EcoTrack.Core.Entities.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Badges");

                    b.Navigation("Suggestions");
                });
#pragma warning restore 612, 618
        }
    }
}
